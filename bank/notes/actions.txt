1 startapp
2 regsiter  in settings 
3 include URLs
4 urls and views connection
5 pass data via urls
6 in view = { 'var_for_template' : value } in templeate :  {{'var_for_template'}}
7 you can use 'if'  in the templates 
8 you can create  master base template 
9 administration  in  django depends on  middleware and controls installed  apps 
10 create  super user  python manage.py createsuperuser 
11 https://medium.com/scalereal/everything-you-need-to-know-about-middleware-in-django-2a3bd3853cd6 
12 you have  groups and  users in admin 
13 you creathe the models with models features in models.py 
14 run these python manage.py makemigrations myapp python manage.py migrate
15 admin.register()  in admin.py
16 __str__() method  for model representation. 
17 the admin  panel has  a lot of features like sharing user access  and  also the way you can display info
18   the models exist for database tasks and  operations and the admin is  interface for the CRUD  management of data . 
19  how to  allow people   register  as   investors ? 
a.... create model and model forms with fields and model
b.... create view. url wakes up the view which renders the template 
c.... view   loks  like : form = InvestorForm() return render(request, 'create_user.html', {'form': form})
and it renders page but if method is post it saves model from post input.
it renders the page until gets  post. then it redirects to success page .   
20 how to see objects? you import model to views and there approach your model like 
objects =  your_model.objects.all()  and then filter and iterate  like object.name(other field) in objects from model. 
21 specific = your_model.objects.get(name = " name of object you look for")
22 sorex = Dreamreal.objects.get(name = "sorex")
23 update is very similar to create. you fill the form again and then your_updated_object.save()
24 dr1 = Dreamreal()
>>> dr1.website = 'company1.com'
>>> dr1.name = 'company1'
>>> dr1.mail = 'contact@company1'
>>> dr1.phonenumber = '12345'
>>> dr1.save()    in django   the   objects in model which are rows act like objects and the fields act like values
25 so   you can get info via post with object and  just objecit.fileld = data .  object.save() thats it. 

26 i copied the data preproccess and prediciton functions for the close prices of stocks and implmented .  imported those 
functions to the views  and displayed with json response 
27 this is how i passed the plot into the picture: 
  buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    
    # Encode the image in base64
    string = base64.b64encode(buf.read())
    uri = urllib.parse.quote(string)
    
    
 
    return render(request, 'about.html', {'plot_data': uri})    
in template : <img src="data:image/png;base64,{{ plot_data }}" alt="My Plot">
28 now in above page  you  can see the visualization of the model .   forecast functions returned predictions and y_test 
and then i  apllied visualizations and imported into about page
29 next step is make model to get time periods , then preproccess them and visualize predictions on top of real data. 
30 <form action="{% url 'predictions' %}" method="post">,  i created such  form in welcome which calls 'predictions' url and sends data from  form 
to the predictions url   which evokes the see_prefictions function.  the functions gets the post data and input  it  in the forecast model 
which sends   data and user   to  the about page 

31  what  i  did    with   mlops : 
a . install mlflow
b.  mlflow start and mlflow log params and metrics and end expreremt 
c. created urls for  view  fucntion 
d . run python -m mlflow ui   in   same   direcotry  of the   python  manage.py runserver 
 
32 sentiment analysis with  mlflow : 
a . input  form  which sends the post to  sentiment  url 
b . created  view function with  simplke   htttp response 
c .   url   that  invokes the view function 
d .   view  functon  gets  the  post  data 
e .  mlflloow-tutorial.py file has 3 functions 
    .preporcess text 
    .trains ml model and  returns model and vectorizer 
    .vectorizer function from the model for data process for inference
f . view  function calls the models and vectorizer and inputsthe post text
j . implement mlflow  for  tracking :
    mlflow.set_experiment('Baseline Model')
    with mlflow.start_run(): 
         mlflow.log_metric('accuracy', accuracy)
         mlflow.sklearn.log_model(rf_classifier, 'random forest model') and etc 

k . regsitred the model  for   versioning
l . created logistic regresiioin model with mlflow.set_experiment('Baseline Model')
so  i  compared the  two  models 
     

  
    
.....................next   steps   : 
,повторение   действий которые  уже  выполнил  
,млопс текст файл зайди   и начни просто изучать  инструментыв по  очереди 
например  гит  и гитхаю  ждя  млопс 
потом версии данных  и так далее , 
, определись с целями проэкта и так  далее 
, окружи себя контенотом для млопс и мл ....


